# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RegisterOrgInfoBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, organization_id: str=None, admin_name: str=None, email_id: str=None, phone_number: str=None, password: str=None, confirm_password: str=None, address: str=None):  # noqa: E501
        """RegisterOrgInfoBody - a model defined in Swagger

        :param organization_id: The organization_id of this RegisterOrgInfoBody.  # noqa: E501
        :type organization_id: str
        :param admin_name: The admin_name of this RegisterOrgInfoBody.  # noqa: E501
        :type admin_name: str
        :param email_id: The email_id of this RegisterOrgInfoBody.  # noqa: E501
        :type email_id: str
        :param phone_number: The phone_number of this RegisterOrgInfoBody.  # noqa: E501
        :type phone_number: str
        :param password: The password of this RegisterOrgInfoBody.  # noqa: E501
        :type password: str
        :param confirm_password: The confirm_password of this RegisterOrgInfoBody.  # noqa: E501
        :type confirm_password: str
        :param address: The address of this RegisterOrgInfoBody.  # noqa: E501
        :type address: str
        """
        self.swagger_types = {
            'organization_id': str,
            'admin_name': str,
            'email_id': str,
            'phone_number': str,
            'password': str,
            'confirm_password': str,
            'address': str
        }

        self.attribute_map = {
            'organization_id': 'Organization ID',
            'admin_name': 'Admin Name',
            'email_id': 'Email ID',
            'phone_number': 'Phone Number',
            'password': 'Password',
            'confirm_password': 'Confirm Password',
            'address': 'Address'
        }
        self._organization_id = organization_id
        self._admin_name = admin_name
        self._email_id = email_id
        self._phone_number = phone_number
        self._password = password
        self._confirm_password = confirm_password
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'RegisterOrgInfoBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The register_org_info_body of this RegisterOrgInfoBody.  # noqa: E501
        :rtype: RegisterOrgInfoBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organization_id(self) -> str:
        """Gets the organization_id of this RegisterOrgInfoBody.

        The ID of the new organization being registered  # noqa: E501

        :return: The organization_id of this RegisterOrgInfoBody.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id: str):
        """Sets the organization_id of this RegisterOrgInfoBody.

        The ID of the new organization being registered  # noqa: E501

        :param organization_id: The organization_id of this RegisterOrgInfoBody.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def admin_name(self) -> str:
        """Gets the admin_name of this RegisterOrgInfoBody.

        The name of the admin for the new organization being registered  # noqa: E501

        :return: The admin_name of this RegisterOrgInfoBody.
        :rtype: str
        """
        return self._admin_name

    @admin_name.setter
    def admin_name(self, admin_name: str):
        """Sets the admin_name of this RegisterOrgInfoBody.

        The name of the admin for the new organization being registered  # noqa: E501

        :param admin_name: The admin_name of this RegisterOrgInfoBody.
        :type admin_name: str
        """
        if admin_name is None:
            raise ValueError("Invalid value for `admin_name`, must not be `None`")  # noqa: E501

        self._admin_name = admin_name

    @property
    def email_id(self) -> str:
        """Gets the email_id of this RegisterOrgInfoBody.

        The email address of the admin for the new organization being registered  # noqa: E501

        :return: The email_id of this RegisterOrgInfoBody.
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id: str):
        """Sets the email_id of this RegisterOrgInfoBody.

        The email address of the admin for the new organization being registered  # noqa: E501

        :param email_id: The email_id of this RegisterOrgInfoBody.
        :type email_id: str
        """
        if email_id is None:
            raise ValueError("Invalid value for `email_id`, must not be `None`")  # noqa: E501

        self._email_id = email_id

    @property
    def phone_number(self) -> str:
        """Gets the phone_number of this RegisterOrgInfoBody.

        The phone number of the admin for the new organization being registered  # noqa: E501

        :return: The phone_number of this RegisterOrgInfoBody.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number: str):
        """Sets the phone_number of this RegisterOrgInfoBody.

        The phone number of the admin for the new organization being registered  # noqa: E501

        :param phone_number: The phone_number of this RegisterOrgInfoBody.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def password(self) -> str:
        """Gets the password of this RegisterOrgInfoBody.

        The password for the new organization being registered  # noqa: E501

        :return: The password of this RegisterOrgInfoBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this RegisterOrgInfoBody.

        The password for the new organization being registered  # noqa: E501

        :param password: The password of this RegisterOrgInfoBody.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def confirm_password(self) -> str:
        """Gets the confirm_password of this RegisterOrgInfoBody.

        Confirming password for the new organization being registered  # noqa: E501

        :return: The confirm_password of this RegisterOrgInfoBody.
        :rtype: str
        """
        return self._confirm_password

    @confirm_password.setter
    def confirm_password(self, confirm_password: str):
        """Sets the confirm_password of this RegisterOrgInfoBody.

        Confirming password for the new organization being registered  # noqa: E501

        :param confirm_password: The confirm_password of this RegisterOrgInfoBody.
        :type confirm_password: str
        """
        if confirm_password is None:
            raise ValueError("Invalid value for `confirm_password`, must not be `None`")  # noqa: E501

        self._confirm_password = confirm_password

    @property
    def address(self) -> str:
        """Gets the address of this RegisterOrgInfoBody.

        Address of the Office of the new organization being registered  # noqa: E501

        :return: The address of this RegisterOrgInfoBody.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this RegisterOrgInfoBody.

        Address of the Office of the new organization being registered  # noqa: E501

        :param address: The address of this RegisterOrgInfoBody.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address
