# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Settings(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, working_days: List[str]=None, face_detection: bool=None, face_mask_detection: bool=None):  # noqa: E501
        """Settings - a model defined in Swagger

        :param working_days: The working_days of this Settings.  # noqa: E501
        :type working_days: List[str]
        :param face_detection: The face_detection of this Settings.  # noqa: E501
        :type face_detection: bool
        :param face_mask_detection: The face_mask_detection of this Settings.  # noqa: E501
        :type face_mask_detection: bool
        """
        self.swagger_types = {
            'working_days': List[str],
            'face_detection': bool,
            'face_mask_detection': bool
        }

        self.attribute_map = {
            'working_days': 'workingDays',
            'face_detection': 'Face Detection',
            'face_mask_detection': 'Face Mask Detection'
        }
        self._working_days = working_days
        self._face_detection = face_detection
        self._face_mask_detection = face_mask_detection

    @classmethod
    def from_dict(cls, dikt) -> 'Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The settings of this Settings.  # noqa: E501
        :rtype: Settings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def working_days(self) -> List[str]:
        """Gets the working_days of this Settings.


        :return: The working_days of this Settings.
        :rtype: List[str]
        """
        return self._working_days

    @working_days.setter
    def working_days(self, working_days: List[str]):
        """Sets the working_days of this Settings.


        :param working_days: The working_days of this Settings.
        :type working_days: List[str]
        """
        allowed_values = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]  # noqa: E501
        if not set(working_days).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `working_days` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(working_days) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._working_days = working_days

    @property
    def face_detection(self) -> bool:
        """Gets the face_detection of this Settings.


        :return: The face_detection of this Settings.
        :rtype: bool
        """
        return self._face_detection

    @face_detection.setter
    def face_detection(self, face_detection: bool):
        """Sets the face_detection of this Settings.


        :param face_detection: The face_detection of this Settings.
        :type face_detection: bool
        """

        self._face_detection = face_detection

    @property
    def face_mask_detection(self) -> bool:
        """Gets the face_mask_detection of this Settings.


        :return: The face_mask_detection of this Settings.
        :rtype: bool
        """
        return self._face_mask_detection

    @face_mask_detection.setter
    def face_mask_detection(self, face_mask_detection: bool):
        """Sets the face_mask_detection of this Settings.


        :param face_mask_detection: The face_mask_detection of this Settings.
        :type face_mask_detection: bool
        """

        self._face_mask_detection = face_mask_detection
